name: Go CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app_password
          POSTGRES_DB: productdb
        # 映射一个随机主机端口，避免占用冲突
        ports:
          - 5432/tcp
        options: >-
          --health-cmd="pg_isready -U app -d productdb -h 127.0.0.1 || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.3'
          check-latest: true
          cache: true

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for Postgres (by health)
        env:
          PGPORT: ${{ job.services.postgres.ports['5432'] }}   # 映射到的主机端口
        run: |
          for i in {1..60}; do
            if pg_isready -h 127.0.0.1 -p "$PGPORT" -U app -d productdb; then
              echo "Postgres is ready"; exit 0
            fi
            sleep 2
          done
          echo "Postgres not ready after timeout" >&2
          exit 1

      - name: Apply migrations (psql)
        env:
          PGPASSWORD: app_password
          PGPORT: ${{ job.services.postgres.ports['5432'] }}
        run: |
          psql -v ON_ERROR_STOP=1 -h 127.0.0.1 -p "$PGPORT" -U app -d productdb -f apps/product-query-svc/adapters/outbound/postgres/migrations/000001_init.up.sql
          psql -v ON_ERROR_STOP=1 -h 127.0.0.1 -p "$PGPORT" -U app -d productdb -f apps/product-query-svc/adapters/outbound/postgres/migrations/000002_seed_test_data.up.sql

      - name: Test integration Postgres endpoints
        env:
          DATABASE_URL: postgres://app:app_password@127.0.0.1:${{ job.services.postgres.ports['5432'] }}/productdb?sslmode=disable
        run: go test -v ./test/... -run Postgres

      - name: Build
        run: go build -v ./...

      - name: Test (all)
        env:
          DATABASE_URL: postgres://app:app_password@127.0.0.1:${{ job.services.postgres.ports['5432'] }}/productdb?sslmode=disable
        run: go test -v ./...
