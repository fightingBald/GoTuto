openapi: 3.0.0
info:
  title: Marketplace Demo API
  version: 1.0.0
paths:
  /products/{id}:
    get:
      operationId: GetProductByID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Single product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          $ref: '#/components/responses/ErrorResponse'
  /products/search:
    get:
      operationId: SearchProducts
      parameters:
        - in: query
          name: q
          schema:
            type: string
            minLength: 3
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
        '400':
          $ref: '#/components/responses/ErrorResponse'

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          minLength: 1
          maxLength: 120
        price:
          type: number
          minimum: 0
      required: [id, name, price]

    ProductList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        page:
          type: integer
        pageSize:
          type: integer
        total:
          type: integer
      required: [items, page, pageSize, total]

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field: { type: string }
              reason: { type: string }
      required: [code, message]

  responses:
    ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
