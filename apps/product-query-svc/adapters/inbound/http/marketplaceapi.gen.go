// Package httpadapter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package httpadapter

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Comment defines model for Comment.
type Comment struct {
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"createdAt"`
	Id        int64     `json:"id"`
	ProductId int64     `json:"productId"`
	UpdatedAt time.Time `json:"updatedAt"`
	UserId    int64     `json:"userId"`
}

// CommentList defines model for CommentList.
type CommentList struct {
	Items []Comment `json:"items"`
}

// Product defines model for Product.
type Product struct {
	Id    int64   `json:"id"`
	Name  string  `json:"name"`
	Price float32 `json:"price"`
}

// ProductList defines model for ProductList.
type ProductList struct {
	Items    []Product `json:"items"`
	Page     int       `json:"page"`
	PageSize int       `json:"pageSize"`
	Total    int       `json:"total"`
}

// User User profile returned by the API.
type User struct {
	CreatedAt *time.Time          `json:"createdAt,omitempty"`
	Email     openapi_types.Email `json:"email"`
	Id        *int64              `json:"id,omitempty"`
	Name      string              `json:"name"`
}

// CreateProductJSONBody defines parameters for CreateProduct.
type CreateProductJSONBody struct {
	Name  string  `json:"name"`
	Price float32 `json:"price"`
}

// SearchProductsParams defines parameters for SearchProducts.
type SearchProductsParams struct {
	Q        *string `form:"q,omitempty" json:"q,omitempty"`
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	PageSize *int    `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// UpdateProductJSONBody defines parameters for UpdateProduct.
type UpdateProductJSONBody struct {
	Name  string  `json:"name"`
	Price float32 `json:"price"`
}

// CreateProductCommentJSONBody defines parameters for CreateProductComment.
type CreateProductCommentJSONBody struct {
	Content string `json:"content"`
	UserId  int64  `json:"userId"`
}

// DeleteProductCommentParams defines parameters for DeleteProductComment.
type DeleteProductCommentParams struct {
	UserId int64 `form:"userId" json:"userId"`
}

// UpdateProductCommentJSONBody defines parameters for UpdateProductComment.
type UpdateProductCommentJSONBody struct {
	Content string `json:"content"`
	UserId  int64  `json:"userId"`
}

// UpdateProductCommentParams defines parameters for UpdateProductComment.
type UpdateProductCommentParams struct {
	UserId int64 `form:"userId" json:"userId"`
}

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody CreateProductJSONBody

// UpdateProductJSONRequestBody defines body for UpdateProduct for application/json ContentType.
type UpdateProductJSONRequestBody UpdateProductJSONBody

// CreateProductCommentJSONRequestBody defines body for CreateProductComment for application/json ContentType.
type CreateProductCommentJSONRequestBody CreateProductCommentJSONBody

// UpdateProductCommentJSONRequestBody defines body for UpdateProductComment for application/json ContentType.
type UpdateProductCommentJSONRequestBody UpdateProductCommentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /products)
	CreateProduct(w http.ResponseWriter, r *http.Request)

	// (GET /products/search)
	SearchProducts(w http.ResponseWriter, r *http.Request, params SearchProductsParams)

	// (DELETE /products/{id})
	DeleteProductByID(w http.ResponseWriter, r *http.Request, id int64)

	// (GET /products/{id})
	GetProductByID(w http.ResponseWriter, r *http.Request, id int64)

	// (PUT /products/{id})
	UpdateProduct(w http.ResponseWriter, r *http.Request, id int64)

	// (GET /products/{productId}/comments)
	ListProductComments(w http.ResponseWriter, r *http.Request, productId int64)

	// (POST /products/{productId}/comments)
	CreateProductComment(w http.ResponseWriter, r *http.Request, productId int64)

	// (DELETE /products/{productId}/comments/{commentId})
	DeleteProductComment(w http.ResponseWriter, r *http.Request, productId int64, commentId int64, params DeleteProductCommentParams)

	// (PUT /products/{productId}/comments/{commentId})
	UpdateProductComment(w http.ResponseWriter, r *http.Request, productId int64, commentId int64, params UpdateProductCommentParams)

	// (GET /users/{id})
	GetUserByID(w http.ResponseWriter, r *http.Request, id int64)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (POST /products)
func (_ Unimplemented) CreateProduct(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /products/search)
func (_ Unimplemented) SearchProducts(w http.ResponseWriter, r *http.Request, params SearchProductsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /products/{id})
func (_ Unimplemented) DeleteProductByID(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /products/{id})
func (_ Unimplemented) GetProductByID(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /products/{id})
func (_ Unimplemented) UpdateProduct(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /products/{productId}/comments)
func (_ Unimplemented) ListProductComments(w http.ResponseWriter, r *http.Request, productId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /products/{productId}/comments)
func (_ Unimplemented) CreateProductComment(w http.ResponseWriter, r *http.Request, productId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /products/{productId}/comments/{commentId})
func (_ Unimplemented) DeleteProductComment(w http.ResponseWriter, r *http.Request, productId int64, commentId int64, params DeleteProductCommentParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /products/{productId}/comments/{commentId})
func (_ Unimplemented) UpdateProductComment(w http.ResponseWriter, r *http.Request, productId int64, commentId int64, params UpdateProductCommentParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /users/{id})
func (_ Unimplemented) GetUserByID(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateProduct operation middleware
func (siw *ServerInterfaceWrapper) CreateProduct(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProduct(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchProducts operation middleware
func (siw *ServerInterfaceWrapper) SearchProducts(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchProductsParams

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchProducts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProductByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteProductByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProductByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProductByID operation middleware
func (siw *ServerInterfaceWrapper) GetProductByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProductByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProduct operation middleware
func (siw *ServerInterfaceWrapper) UpdateProduct(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProduct(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProductComments operation middleware
func (siw *ServerInterfaceWrapper) ListProductComments(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId int64

	err = runtime.BindStyledParameterWithOptions("simple", "productId", chi.URLParam(r, "productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "productId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProductComments(w, r, productId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProductComment operation middleware
func (siw *ServerInterfaceWrapper) CreateProductComment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId int64

	err = runtime.BindStyledParameterWithOptions("simple", "productId", chi.URLParam(r, "productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "productId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProductComment(w, r, productId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProductComment operation middleware
func (siw *ServerInterfaceWrapper) DeleteProductComment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId int64

	err = runtime.BindStyledParameterWithOptions("simple", "productId", chi.URLParam(r, "productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "productId", Err: err})
		return
	}

	// ------------- Path parameter "commentId" -------------
	var commentId int64

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", chi.URLParam(r, "commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "commentId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteProductCommentParams

	// ------------- Required query parameter "userId" -------------

	if paramValue := r.URL.Query().Get("userId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "userId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "userId", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProductComment(w, r, productId, commentId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProductComment operation middleware
func (siw *ServerInterfaceWrapper) UpdateProductComment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId int64

	err = runtime.BindStyledParameterWithOptions("simple", "productId", chi.URLParam(r, "productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "productId", Err: err})
		return
	}

	// ------------- Path parameter "commentId" -------------
	var commentId int64

	err = runtime.BindStyledParameterWithOptions("simple", "commentId", chi.URLParam(r, "commentId"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "commentId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateProductCommentParams

	// ------------- Required query parameter "userId" -------------

	if paramValue := r.URL.Query().Get("userId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "userId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "userId", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProductComment(w, r, productId, commentId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserByID operation middleware
func (siw *ServerInterfaceWrapper) GetUserByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/products", wrapper.CreateProduct)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/products/search", wrapper.SearchProducts)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/products/{id}", wrapper.DeleteProductByID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/products/{id}", wrapper.GetProductByID)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/products/{id}", wrapper.UpdateProduct)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/products/{productId}/comments", wrapper.ListProductComments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/products/{productId}/comments", wrapper.CreateProductComment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/products/{productId}/comments/{commentId}", wrapper.DeleteProductComment)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/products/{productId}/comments/{commentId}", wrapper.UpdateProductComment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{id}", wrapper.GetUserByID)
	})

	return r
}

type CreateProductRequestObject struct {
	Body *CreateProductJSONRequestBody
}

type CreateProductResponseObject interface {
	VisitCreateProductResponse(w http.ResponseWriter) error
}

type CreateProduct201JSONResponse Product

func (response CreateProduct201JSONResponse) VisitCreateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateProduct400JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response CreateProduct400JSONResponse) VisitCreateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SearchProductsRequestObject struct {
	Params SearchProductsParams
}

type SearchProductsResponseObject interface {
	VisitSearchProductsResponse(w http.ResponseWriter) error
}

type SearchProducts200JSONResponse ProductList

func (response SearchProducts200JSONResponse) VisitSearchProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchProducts400JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response SearchProducts400JSONResponse) VisitSearchProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProductByIDRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteProductByIDResponseObject interface {
	VisitDeleteProductByIDResponse(w http.ResponseWriter) error
}

type DeleteProductByID204Response struct {
}

func (response DeleteProductByID204Response) VisitDeleteProductByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteProductByID400JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response DeleteProductByID400JSONResponse) VisitDeleteProductByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProductByID404JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response DeleteProductByID404JSONResponse) VisitDeleteProductByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProductByIDRequestObject struct {
	Id int64 `json:"id"`
}

type GetProductByIDResponseObject interface {
	VisitGetProductByIDResponse(w http.ResponseWriter) error
}

type GetProductByID200JSONResponse Product

func (response GetProductByID200JSONResponse) VisitGetProductByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProductByID400JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response GetProductByID400JSONResponse) VisitGetProductByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProductByID404JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response GetProductByID404JSONResponse) VisitGetProductByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProductRequestObject struct {
	Id   int64 `json:"id"`
	Body *UpdateProductJSONRequestBody
}

type UpdateProductResponseObject interface {
	VisitUpdateProductResponse(w http.ResponseWriter) error
}

type UpdateProduct200JSONResponse Product

func (response UpdateProduct200JSONResponse) VisitUpdateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProduct400JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response UpdateProduct400JSONResponse) VisitUpdateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProduct404JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response UpdateProduct404JSONResponse) VisitUpdateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListProductCommentsRequestObject struct {
	ProductId int64 `json:"productId"`
}

type ListProductCommentsResponseObject interface {
	VisitListProductCommentsResponse(w http.ResponseWriter) error
}

type ListProductComments200JSONResponse CommentList

func (response ListProductComments200JSONResponse) VisitListProductCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProductComments400JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response ListProductComments400JSONResponse) VisitListProductCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListProductComments404JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response ListProductComments404JSONResponse) VisitListProductCommentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProductCommentRequestObject struct {
	ProductId int64 `json:"productId"`
	Body      *CreateProductCommentJSONRequestBody
}

type CreateProductCommentResponseObject interface {
	VisitCreateProductCommentResponse(w http.ResponseWriter) error
}

type CreateProductComment201JSONResponse Comment

func (response CreateProductComment201JSONResponse) VisitCreateProductCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateProductComment400JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response CreateProductComment400JSONResponse) VisitCreateProductCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProductComment404JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response CreateProductComment404JSONResponse) VisitCreateProductCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProductCommentRequestObject struct {
	ProductId int64 `json:"productId"`
	CommentId int64 `json:"commentId"`
	Params    DeleteProductCommentParams
}

type DeleteProductCommentResponseObject interface {
	VisitDeleteProductCommentResponse(w http.ResponseWriter) error
}

type DeleteProductComment204Response struct {
}

func (response DeleteProductComment204Response) VisitDeleteProductCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteProductComment400JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response DeleteProductComment400JSONResponse) VisitDeleteProductCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProductComment403JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response DeleteProductComment403JSONResponse) VisitDeleteProductCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProductComment404JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response DeleteProductComment404JSONResponse) VisitDeleteProductCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProductCommentRequestObject struct {
	ProductId int64 `json:"productId"`
	CommentId int64 `json:"commentId"`
	Params    UpdateProductCommentParams
	Body      *UpdateProductCommentJSONRequestBody
}

type UpdateProductCommentResponseObject interface {
	VisitUpdateProductCommentResponse(w http.ResponseWriter) error
}

type UpdateProductComment200JSONResponse Comment

func (response UpdateProductComment200JSONResponse) VisitUpdateProductCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProductComment400JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response UpdateProductComment400JSONResponse) VisitUpdateProductCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProductComment403JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response UpdateProductComment403JSONResponse) VisitUpdateProductCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProductComment404JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response UpdateProductComment404JSONResponse) VisitUpdateProductCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByIDRequestObject struct {
	Id int64 `json:"id"`
}

type GetUserByIDResponseObject interface {
	VisitGetUserByIDResponse(w http.ResponseWriter) error
}

type GetUserByID200JSONResponse User

func (response GetUserByID200JSONResponse) VisitGetUserByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByID400JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response GetUserByID400JSONResponse) VisitGetUserByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByID404JSONResponse struct {
	Code    string `json:"code"`
	Details *[]struct {
		Field  *string `json:"field,omitempty"`
		Reason *string `json:"reason,omitempty"`
	} `json:"details,omitempty"`
	Message string `json:"message"`
}

func (response GetUserByID404JSONResponse) VisitGetUserByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /products)
	CreateProduct(ctx context.Context, request CreateProductRequestObject) (CreateProductResponseObject, error)

	// (GET /products/search)
	SearchProducts(ctx context.Context, request SearchProductsRequestObject) (SearchProductsResponseObject, error)

	// (DELETE /products/{id})
	DeleteProductByID(ctx context.Context, request DeleteProductByIDRequestObject) (DeleteProductByIDResponseObject, error)

	// (GET /products/{id})
	GetProductByID(ctx context.Context, request GetProductByIDRequestObject) (GetProductByIDResponseObject, error)

	// (PUT /products/{id})
	UpdateProduct(ctx context.Context, request UpdateProductRequestObject) (UpdateProductResponseObject, error)

	// (GET /products/{productId}/comments)
	ListProductComments(ctx context.Context, request ListProductCommentsRequestObject) (ListProductCommentsResponseObject, error)

	// (POST /products/{productId}/comments)
	CreateProductComment(ctx context.Context, request CreateProductCommentRequestObject) (CreateProductCommentResponseObject, error)

	// (DELETE /products/{productId}/comments/{commentId})
	DeleteProductComment(ctx context.Context, request DeleteProductCommentRequestObject) (DeleteProductCommentResponseObject, error)

	// (PUT /products/{productId}/comments/{commentId})
	UpdateProductComment(ctx context.Context, request UpdateProductCommentRequestObject) (UpdateProductCommentResponseObject, error)

	// (GET /users/{id})
	GetUserByID(ctx context.Context, request GetUserByIDRequestObject) (GetUserByIDResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CreateProduct operation middleware
func (sh *strictHandler) CreateProduct(w http.ResponseWriter, r *http.Request) {
	var request CreateProductRequestObject

	var body CreateProductJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProduct(ctx, request.(CreateProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProduct")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProductResponseObject); ok {
		if err := validResponse.VisitCreateProductResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchProducts operation middleware
func (sh *strictHandler) SearchProducts(w http.ResponseWriter, r *http.Request, params SearchProductsParams) {
	var request SearchProductsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchProducts(ctx, request.(SearchProductsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchProducts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchProductsResponseObject); ok {
		if err := validResponse.VisitSearchProductsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProductByID operation middleware
func (sh *strictHandler) DeleteProductByID(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteProductByIDRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProductByID(ctx, request.(DeleteProductByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProductByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProductByIDResponseObject); ok {
		if err := validResponse.VisitDeleteProductByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProductByID operation middleware
func (sh *strictHandler) GetProductByID(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetProductByIDRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProductByID(ctx, request.(GetProductByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProductByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProductByIDResponseObject); ok {
		if err := validResponse.VisitGetProductByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProduct operation middleware
func (sh *strictHandler) UpdateProduct(w http.ResponseWriter, r *http.Request, id int64) {
	var request UpdateProductRequestObject

	request.Id = id

	var body UpdateProductJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProduct(ctx, request.(UpdateProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProduct")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProductResponseObject); ok {
		if err := validResponse.VisitUpdateProductResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProductComments operation middleware
func (sh *strictHandler) ListProductComments(w http.ResponseWriter, r *http.Request, productId int64) {
	var request ListProductCommentsRequestObject

	request.ProductId = productId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProductComments(ctx, request.(ListProductCommentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProductComments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProductCommentsResponseObject); ok {
		if err := validResponse.VisitListProductCommentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProductComment operation middleware
func (sh *strictHandler) CreateProductComment(w http.ResponseWriter, r *http.Request, productId int64) {
	var request CreateProductCommentRequestObject

	request.ProductId = productId

	var body CreateProductCommentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProductComment(ctx, request.(CreateProductCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProductComment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProductCommentResponseObject); ok {
		if err := validResponse.VisitCreateProductCommentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProductComment operation middleware
func (sh *strictHandler) DeleteProductComment(w http.ResponseWriter, r *http.Request, productId int64, commentId int64, params DeleteProductCommentParams) {
	var request DeleteProductCommentRequestObject

	request.ProductId = productId
	request.CommentId = commentId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProductComment(ctx, request.(DeleteProductCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProductComment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProductCommentResponseObject); ok {
		if err := validResponse.VisitDeleteProductCommentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProductComment operation middleware
func (sh *strictHandler) UpdateProductComment(w http.ResponseWriter, r *http.Request, productId int64, commentId int64, params UpdateProductCommentParams) {
	var request UpdateProductCommentRequestObject

	request.ProductId = productId
	request.CommentId = commentId
	request.Params = params

	var body UpdateProductCommentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProductComment(ctx, request.(UpdateProductCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProductComment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProductCommentResponseObject); ok {
		if err := validResponse.VisitUpdateProductCommentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserByID operation middleware
func (sh *strictHandler) GetUserByID(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetUserByIDRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserByID(ctx, request.(GetUserByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserByIDResponseObject); ok {
		if err := validResponse.VisitGetUserByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaW2/bthf/KgL//0ctVhJvGPTW1sMQoMNSBH0qgoCRjh124iUUVdQz9N0HXnSzKNtx",
	"Zc1Z+xSHl8Nzzu/ceMQNSjgVnAFTOYo3SGCJKSiQ5r9m7qGZeHjHKQWmbhZ6CWEoRgKrJxQihimgWO8y",
	"8ykKkYTngkhIUaxkASHKkyegWG9cckmxQjEiTP0yRyGihBFaUBRfhkitBdgpWIFEZRkO8DLIBJni9Fu8",
	"gvr85wLkumFA6Ln2kSkscZEpc8LRp92Rv3eeaOa9p15FIaL4qzs2io5lQvK0SIbBF25+CvV/GNLEc0cF",
	"lLD3wFbqCcXXNfVcScJWO4h/zEHeLD4YwgPHFHrJmIKWlhTk6i1PCWz7YGeucsN3ErACu5IpYEr/xEJk",
	"JMGKcDb7nHOmxxqm/i9hiWL0v1lDe2Zn679b1A1rKeSJJEITRTFyC4JEryCcBQKvM4776uhq2CvDR5Ge",
	"UAZHfYcMhVlxlATOH06EQpe6RwK34AAUjG3lgrPcY1du/OE3KbkcXQpL1cO9mQiq440zuj2atEPHpCXJ",
	"BUhVu0TNHMVfK9++iua/hm1nv+w5e4iMniB9ozrOqdH/SRGqQ2dvC0m9jrztvGEr9B223lrdi3hxEecQ",
	"+mXbAj7ZfNgOznXwqrTZVk6bufuaNn/8DInSfDho3pPcAw9RQLs/XuCsmro7DkuJ131BDFEfU84XPAwd",
	"ioiN6x2ruryK9hqVkCQBl2lscI/qVaygj0NwmOOq7TskGlPNlZJ6ag5txRJvfJbdqjz6s4ornPmmvMiF",
	"VWXUKlcsBZ8GdBa2ZUw7bujRQEi+JBkEElQhGaTB4zpQTxC8ub25sLbeDhl7/V4CTv9k2brK4T2UgWKS",
	"dbbbkbAThH6eHx5CBo78VoPcYWoVx406fErfdskfAfjsArC/TBsTqOMl7Ql2gADnlUn8BeQr1G5dz20z",
	"nrZjecNWCgqTrKvy7tYlgSz17pWAXXXYj0c9BrdzD4U876afgWhmWG/W7xL+v1cP+K8FPfmmY/ulHH/H",
	"lUzF9o+KZvKKRu8nbMkNskRleu4PLP8CJTKcQLAAyrWSUYi+gMwtIpcX0UWkOeYCGBYExejaDIWm42Uw",
	"mLl8buMkt7atQTK3ZR3fkfXRylbb/Z31kKF3GgyzAzsP29f7q+jyVN0IbyfFqj8QjVPOo2hYQsfpbEcX",
	"wuQNvMo14reVnu/1aK32WQ5YJk/6mBV4lH9npuvNYae9/cnPW7NkNtR1LMMjt5p+8TftNmGmvO+BHZ0K",
	"bBOxPYDr8YAvg9oDJkJ8Q9LShs8MbO7rQr4w42732/XNYiTUbxY+tc/7kdwykI6iD01ifgqVhn5/+R3U",
	"VJqLpoxOd4StMhg1OJ0QGlF4oLF3kCaPjIrMVClpUtCtxtLXgXo3xtVtgnLmPqbmgzlOB+JK79Xaccyj",
	"+dQ3if+2OwHD32ryYMnlGWNaY2A8eX9JWDUrTgPZWI699TVwglqzbuIM15pJ0+c5XyPY69izTf1e4vDC",
	"5mRWc2xt2rwJOZpE+4P7v1NqXZ9vINlbEnwfFjFyPKteBkyX3XYVKmPHs+szDolFrmGvLnNDlxFtAK/w",
	"JmJafMPXkCIHeYZJS3Nt4GnGNgOvTcw7qACzNKCY4RWYRzTAUsGJLT/dA6nbpjngbXjiJOEFU4EEJQl8",
	"wZmPiOWrT6F++uIe8exmpba/8r78JwAA//+6mIfu9SgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
